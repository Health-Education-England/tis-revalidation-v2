name: Deploy

on:
  push:
    branches:
      - main
  workflow_dispatch:

jobs:
  deploy-pre-prod:
    name: Build and deploy to pre-prod on S3
    runs-on: ubuntu-latest
    environment: pre-prod
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Set up Node.js
        uses: actions/setup-node@v3.5.1
        with:
          node-version: 18.12.0
          cache: npm

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: eu-west-2

      - name: Install dependencies
        run: npm install

      - name: Run linting
        run: npm run lint

      - name: Build Angular App
        run: npm run build:misc && npm run build -- --configuration=production

      - name: Run unit tests
        run: npm run test:ci

      - name: Deploy app build to S3 bucket
        run: aws s3 sync ./dist/revalidation/ s3://${{ secrets.AWS_S3_BUCKET }} --delete

      - name: Invalidate CDN Cache
        run: aws cloudfront create-invalidation --distribution-id ${{ secrets.CLOUDFRONT_DISTRIBUTION_ID}} --paths /*.js /*.css /static/*

      - name: Slack Notification - Deploy Success
        if: success()
        uses: rtCamp/action-slack-notify@v2.2.0
        env:
          SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK }}
          SLACK_USERNAME: TIS-REVALIDATION-V2
          SLACK_TITLE: "Successfully deployed to preprod."
          SLACK_CHANNEL: reval-pipeline
          SLACK_ICON_EMOJI: ":deploy_yellow:"
          SLACK_COLOR: FFCC00

      - name: Slack Notification - Deploy Fail
        if: failure()
        uses: rtCamp/action-slack-notify@v2.2.0
        env:
          SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK }}
          SLACK_USERNAME: TIS-REVALIDATION-V2
          SLACK_TITLE: "Failed deployment to preprod."
          SLACK_CHANNEL: reval-pipeline
          SLACK_ICON_EMOJI: ":deploy_red:"
          SLACK_COLOR: FF0000

  build:
    name: Build
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Set up Node
        uses: actions/setup-node@v3.3.0
        with:
          node-version: "18"
          cache: npm

      - name: Pull down dependencies
        run: npm install

      - name: Run linting
        run: npm run lint

      - name: Build
        run: npm run build:misc && npm run build -- --configuration=production

      - name: Run unit tests
        run: npm run test:ci

      - name: Upload build artifact
        uses: actions/upload-artifact@v3
        with:
          name: dist
          path: dist/revalidation

  backup-artifacts:
    name: Backup build artifacts
    needs: build
    runs-on: ubuntu-latest

    steps:
      - name: Download build artifacts
        uses: actions/download-artifact@v3
        with:
          path: build-artifacts

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: eu-west-2

      - name: Backup build artifacts
        run: |
          workflow=$(echo ${{ github.workflow }} | sed -e 's/\W/-/g' -e 's/\(.*\)/\L\1/')
          aws s3 sync build-artifacts s3://tis-build-artifacts/${{ github.event.repository.name }}/$workflow/${{ github.run_number }}

  dockerize:
    name: Dockerize
    needs: build
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Download build artifact
        uses: actions/download-artifact@v3
        with:
          name: dist
          path: dist/revalidation

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: eu-west-2

      - name: Log in to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Build, tag and push image to Amazon ECR
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: tis-revalidation-v2
          IMAGE_TAG: ${{ github.sha }}
        run: |
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
          docker tag $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG $ECR_REGISTRY/$ECR_REPOSITORY:latest
          docker push --all-tags $ECR_REGISTRY/$ECR_REPOSITORY

  cypress-e2e:
    needs: deploy-pre-prod
    name: Run Cypress E2E tests
    runs-on: ubuntu-latest
    container: cypress/browsers:node18.12.0-chrome103-ff107

    steps:
      - uses: actions/checkout@v3

      - name: Cypress run
        uses: cypress-io/github-action@v4
        env:
          CYPRESS_baseUrl: https://stage-revalidation.tis.nhs.uk/
          CYPRESS_password: ${{ secrets.E2E_TEST_PASS }}
          CYPRESS_username: ${{ secrets.E2E_TEST_USER }}
          CYPRESS_secret: ${{ secrets.E2E_TEST_SECRET }}
          # for recording results and videos to Cypress Dashborad
          CYPRESS_RECORD_KEY: ${{secrets.CYPRESS_RECORD_KEY}}
          CYPRESS_coverage: false
        with:
          browser: chrome
          record: true
          #TODO: Fix/finish reporting setup

      - name: Slack Notification - E2E Tests Pass
        if: success()
        uses: rtCamp/action-slack-notify@v2.2.0
        env:
          SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK }}
          SLACK_USERNAME: TIS-REVALIDATION-V2
          SLACK_TITLE: "E2E tests passed"
          SLACK_CHANNEL: reval-pipeline
          SLACK_ICON_EMOJI: ":test_tube:"
          SLACK_COLOR: 00CC00

      - name: Slack Notification - E2E Tests Fail
        if: failure()
        uses: rtCamp/action-slack-notify@v2.2.0
        env:
          SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK }}
          SLACK_USERNAME: TIS-REVALIDATION-V2
          SLACK_TITLE: "E2E tests failed"
          SLACK_CHANNEL: reval-pipeline
          SLACK_ICON_EMOJI: ":test_tube_red:"
          SLACK_COLOR: FF0000

  deploy-prod:
    name: Deploy to production
    needs: cypress-e2e
    runs-on: ubuntu-latest
    environment: prod

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: eu-west-2

      - name: Log in to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Fill in the new image ID in the Amazon ECS task definition
        id: task-def
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        with:
          task-definition: .aws/task-definition-prod.json
          container-name: reval-fe
          image: ${{ steps.login-ecr.outputs.registry }}/tis-revalidation-v2:${{ github.sha }}

      - name: Deploy Amazon ECS task definition
        uses: aws-actions/amazon-ecs-deploy-task-definition@v1
        with:
          task-definition: ${{ steps.task-def.outputs.task-definition }}
          service: reval-fe
          cluster: revalidation-prod
          wait-for-service-stability: true

      - name: Slack Notification
        if: success()
        uses: rtCamp/action-slack-notify@v2.2.0
        env:
          SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK }}
          SLACK_TITLE: "TIS-REVALIDATION-V2 has been deployed through the pipeline"

      - name: Slack Notification
        if: failure()
        uses: rtCamp/action-slack-notify@v2.2.0
        env:
          SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK }}
          SLACK_TITLE: "TIS-REVALIDATION-V2 build has failed in the pipeline"
          SLACK_COLOR: "#fc1303"
